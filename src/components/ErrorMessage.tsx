import React from 'react';
import { ErrorType, ErrorResponse } from '../controllers/ChatController';
import THEME_CONFIG from '../config/theme.config';

interface ErrorMessageProps {
  error: ErrorResponse;
}

const ErrorMessage: React.FC<ErrorMessageProps> = ({ error }) => {
  // Get the appropriate icon and message based on error type
  const getErrorDetails = () => {
    switch (error.type) {
      case ErrorType.NETWORK_ERROR:
        return {
          icon: 'üì°',
          title: 'L·ªói K·∫øt N·ªëi',
          message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet c·ªßa b·∫°n.'
        };
      
      case ErrorType.SERVER_ERROR:
        return {
          icon: 'üö®',
          title: 'L·ªói M√°y Ch·ªß',
          message: 'M√°y ch·ªß ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.'
        };
        
      case ErrorType.TIMEOUT_ERROR:
        return {
          icon: '‚è±Ô∏è',
          title: 'Qu√° Th·ªùi Gian',
          message: 'Y√™u c·∫ßu m·∫•t qu√° nhi·ªÅu th·ªùi gian ƒë·ªÉ ho√†n th√†nh. Vui l√≤ng th·ª≠ l·∫°i.'
        };
        
      case ErrorType.AUTH_ERROR:
        return {
          icon: 'üîê',
          title: 'L·ªói X√°c Th·ª±c',
          message: 'Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi m√°y ch·ªß.'
        };
        
      case ErrorType.RATE_LIMIT_ERROR:
        return {
          icon: 'üõë',
          title: 'Gi·ªõi H·∫°n Truy C·∫≠p',
          message: 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ƒë·ª£i m·ªôt l√°t tr∆∞·ªõc khi th·ª≠ l·∫°i.'
        };
        
      case ErrorType.VALIDATION_ERROR:
        return {
          icon: '‚ö†Ô∏è',
          title: 'Y√™u C·∫ßu Kh√¥ng H·ª£p L·ªá',
          message: error.message || 'D·ªØ li·ªáu y√™u c·∫ßu kh√¥ng h·ª£p l·ªá.'
        };
        
      default:
        return {
          icon: '‚ùì',
          title: 'L·ªói Kh√¥ng X√°c ƒê·ªãnh',
          message: error.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën.'
        };
    }
  };

  const { icon, title, message } = getErrorDetails();

  return (
    <div className="flex justify-start w-full">
      <div className="flex items-end space-x-2">
        <div className="w-8 h-8 rounded-full bg-[#0d47a1] flex items-center justify-center text-white">
          <span className="text-sm font-bold">F</span>
        </div>
        <div className="bg-[#fff8f6] border border-[#ffcdd2] rounded-lg p-4 shadow-md max-w-[80%] ml-2">
          <div className="flex items-start">
            <div className="text-2xl mr-3 flex-shrink-0">{icon}</div>
            <div>
              <h4 className="font-medium text-[#d32f2f] mb-1">{title}</h4>
              <p className="text-[#e57373] text-sm">{message}</p>
              {error.status && (
                <div className="mt-2 flex items-center">
                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-[#ffebee] text-[#d32f2f] border border-[#ffcdd2]">
                    M√£ l·ªói: {error.status}
                  </span>
                </div>
              )}
              <div className="mt-3">
                <button 
                  className="text-xs text-[#0d47a1] hover:underline font-medium"
                  onClick={() => window.location.reload()}
                >
                  Th·ª≠ l·∫°i
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ErrorMessage; 